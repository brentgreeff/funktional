= ShouldB

== A Rails testing framework with a railsy syntax

If you using Test Driven Development (TDD),
and you, test first...
and you want nice test failures along the way...

Give it a whirl

== Install
* Use braid to install, if you don't have it.
      sudo gem install braid

* Then

      braid add git://github.com/brentgreeff/should_b.git -p

* add a setup line to 'test/test_helper.rb'

      class ActiveSupport::TestCase
        setup :should_b
      end

Done!


== For extra flavour, add:
  * should_pricot (Hpricot matchers in Test::Unit)
  * the factory pattern
  * contexts plugin
  * matchy


== Unit Tests

* Use a factory plugin or create your own factory module.
* Start off with a valid instance

      def setup
        @company = create_company
      end

      test "should require a name" do
        @company.should_require_a :name, 'please enter the name'
      end

      test "should require an address" do
        @company.should_require_an :address, 'please enter the address'
      end
      
      test "should not allow creative accounting" do
        @company.creative_accounting = true
        @company.should_have_invalid :books, 'no creative accounting please'
      end
      
      test "company does not require a telephone no if an address is present" do
        @company.address = an_address
        @company.should_not_require_a :telephone_no
      end


== Functional Tests
      
      test "should show the place my order page" do
        get :new
        should :render => 'orders/new'
      end
      
      test "should return the not found page when the id does not exist" do
        get :show, :id => 'does not exist'
        should :respond => 'not_found'
        # This asserts for the public/404 template
      end
      
      test "should return the not found page when the id does not exist" do
        get :show, :id => 'something does not exist'
        should :render_404 => 'somethings/not_found'
      end
      
      test "should assign a new order" do
        get :new
        should :assign_new => Order
      end
      
      test "should assign the order from the id passed in url" do
        get :edit, :id => @order.id
        assigned(Order).should_be @order
      end
      
      test "should associate the current user as the editor" do
        user = create_user
        login_as user
        put :update, :id => @article.id
        assigned(Article).editor.should_be user
      end
      
      test "you can chain these as long as you like to" do
        assigned(Article).editor.first_name.should_be 'pete'
      end

* If you pass a Class, you get type checking
* If you pass a Symbol its just a value based assertion.

      test "should assign a flag if someone logged in" do
        login_as @someone
        get :index
        assigned(:flag).should_be 'Yes'
      end
      
      test "should go to the login page if not logged in" do
        logout
        get :new
        should :redirect_to => '/login'
      end
      
      test "should notify the user when order was created" do
        post :create, :order => attrib
        flashed(:notice).should_be 'Yay, Order created!'
      end
      
      test "should send notifiction email when creating an order" do
        post :create, :order => attrib
        
        should :send_email => {
          :from => 'me@example.com',
          :to => 'you@example.com',
          :subject => 'Your order',
          :containing => "#{@order_number}"
        }
      end
      
      # You can use: should :send_email in Unit test too.
      
      test "should not send notifiction email when order failed" do
        should_not :send_email do
          post :create, :order => missing_attrib(:cc_no)
        end
      end
      
      test "should create an order" do
        should :create => Order do
          post :create, :order => attrib
        end
      end
      
      test "should delete an order" do
        should :delete => Order do
          put :destroy, :id => order.id
        end
      end
      
      test "should not delete an order if not owner" do
        login_as someone_random
        
        should_not :delete => Order do
          put :destroy, :id => order.id
        end
      end
      
      test "should not create order if not logged in" do
        logout
        
        should_not :create => Order do
          post :create, :order => attrib
        end
      end


== Random Characters

* Just plain handy

      @company.name = 81.random_characters
      @company.should_have_invalid :name, 'max is 80'


== Helpers

There are also some helpers for manipulating attributes.

I tend to define an attrib method in my funtional tests
to represent valid attributes passed to create or update a resource.

* eg:

      def attrib
        {
          :first_name => 'Jim',
          :last_name => 'Bean'
        }
      end

Sometimes you want to tests different values, especially invalid ones,
to get away from all the merge noise, I have defined these helpers:

      missing_attrib
      blank_attrib
      replace_attrib
      add_attrib


* Means you can write tests like the following:
      
      should_not :create => Order do
        post :create, :order => blank_attrib(:cc_no)
      end
      should :render => 'orders/new'


Copyright (c) 2009 [Brent Greeff], released under the MIT license
