= Funktional

== A Rails testing framework with a railsy syntax

== Install
* Use braid to install, if you don't have it.
      sudo gem install braid

* Then

      braid add git://github.com/brentgreeff/funktional.git -p

* add a setup line to 'test/test_helper.rb'

      class ActiveSupport::TestCase
        setup :funktional
      end

Done!


== For extra flavour, add:
  * should_pricot (Hpricot matchers in Test::Unit)
  * hash_factory (Super simple factories for your tests)
  * contexts plugin
  * matchy (RSpec matchers in Test::Unit)


== Unit tests

=== Define domain logic through validations.

* Start off with a valid instance

      def setup
        @company = create_company
      end
      
      test "should respond to fax no" do
        @company.should_respond_to :fax_no
      end
      
      test "should require a name" do
        @company.should_require_a :name, 'please enter the name'
      end
      
      test "should require an address" do
        @company.should_require_an :address, 'please enter the address'
      end
      
      test "should not allow creative accounting" do
        @company.creative_accounting = true
        @company.should_have_invalid :books, 'no creative accounting please'
      end
      
      test "company does not require a telephone no if an address is present" do
        @company.address = an_address
        @company.should_not_require_a :telephone_no
      end

* Random Characters
      
      test "company name cannot be longer than 80 characters" do
        @company.name = 81.random_characters
        @company.should_have_invalid :name, 'max is 80'
      end

=== Email

      test "should send email" do
        should :send_email => {
          :from => 'me@example.com',
          :to => 'you@example.com',
          :subject => 'Your order',
          :containing => "important info"
        }
      end
      
      test "should not send email" do
        should_not :send_email do
          # do something here
        end
      end

=== Object creation

      test "should create something" do
        should :create => Something do
          # Do something
        end
      end
      
      test "should delete something" do
        should :delete => Something do
          # Do something
        end
      end
      
      test "should not delete something" do
        should_not :delete => Something do
          # Do something
        end
      end
      
      test "should not create something" do
        should_not :create => Something do
          # Do something
        end
      end


== Testing Controllers

=== Routing

      should :route => '/onions/new' do
        controller 'onions'
        action 'new'
      end

* you need to pass the method if its not a :get request

      should :route => '/onions', :method => :post do
        controller 'onions'
        action 'create'
      end

=== Render

      test "should show the new order page" do
        get :new
        should :render => 'orders/new'
      end

The default 'should :render' checks for a http status code of 200

* What about other codes?
      
      test "should return the not found page when the id does not exist" do
        get :show, :id => 'something does not exist'
        should :render_404 => 'public/404'
      end

=== Redirection

      test "should go to the login page if not logged in" do
        logout
        get :new
        should :redirect_to => '/login'
      end

=== Initializing a new object

      test "should assign a new order" do
        get :new
        should :assign_new => Order
      end

=== Loading Objects

      test "should load order by id" do
        get :edit, :id => @order.id
        assigned(Order).should_be @order
      end

* This checks the object assigned is of the correct type.

=== Testing the attributes of an assigned object.

      test "should associate the current user as the editor" do
        login_as @user = create_user
        put :update, :id => @article.id
        
        assigned(Article).editor.should_be @user
      end
      
      test "you can chain these as long as you like" do
        assigned(Article).editor.first_name.should_be 'pete'
      end

* If you pass a Symbol its just a value based assertion.

      test "should load a collection" do
        get :index
        assigned(:records).should_be [@record_1, @record_2]
      end

=== Flash messages

      test "should notify the user when order was created" do
        post :create, :order => attrib
        flashed(:notice).should_be 'Yay, Order created!'
      end


== Controller Helpers

There are also some helpers for manipulating attributes.

I tend to define an attrib method in my funtional tests
to represent valid attributes passed to create or update a resource.

* eg:

      def attrib
        {
          :first_name => 'Jim',
          :last_name => 'Bean'
        }
      end

Sometimes you want to tests different values, especially invalid ones,
to get away from all the merge noise, I have defined these helpers:

      missing_attrib
      blank_attrib
      replace_attrib
      add_attrib


* Means you can write tests like the following:
      
      should_not :create => Order do
        post :create, :order => blank_attrib(:cc_no)
      end
      should :render => 'orders/new'


Copyright (c) 2009 [Brent Greeff], released under the MIT license
