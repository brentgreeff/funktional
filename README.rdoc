ShouldB
=======

An alternative Rails testing framework which extends
Test::Unit with some useful helper methods covering common scenarios.

It has a nice clear syntax that looks pretty
and reads as plain English.

Use it with the factory pattern and testing becomes a pleasure.

If you are not too sure about creating your own factory module,
or how to include it into your tests,
use the Fixture replacement plugin.


Install
=======

Use braid to install, its great.
braid add git://github.com/brentgreeff/should_b.git -p

add a setup line to 'test/test_helper.rb'
link so:

class ActiveSupport::TestCase
  setup :should_b
end

Unit Examples
=============
@company = create_company (create_company needs to return a valid instance)

@company.should_require_a :name, 'please enter the name'
@company.should_require_an :address, 'please enter the address'

# company should not allow creative accounting
@company.creative_accounting = true
@company.should_have_invalid :books, 'no creative accounting please'

# company does not require telephone_no if address present
@company.address = an_address
@company.should_not_require_a :telephone_no

Random Characters
=================

@company.name = 81.random_characters
@company.should_have_invalid :name, 'max is 80'


Functional Examples
===================

get :new
should :render => 'something/new'

# 

get :show, :id => 'does not exist'
should :respond => 'not_found'

# 

get :new
should :assign_new => Something

# 

get :edit, :id => something.id
assigned(Something).should_be something

# 

get :new
should :redirect_to => '/login'

#

post :create, :something => attrib
flashed(:notice).should_be 'Yay, Something created!'

# 

post :create, :something => attrib

should :send_email => {
  :from => 'me@example.com',
  :to => 'you@example.com',
  :containing => "something awesome"
}

# 

should :create => Something do
  post :create, :something => attrib
end

# 

should :delete => Something do
  put :destroy, :id => something.id
end

# 

should_not :delete => Something do
  put :destroy, :id => something.id
end

# 

should_not :create => Something do
  post :create, :something => attrib
end


Helpers
=======

There are also some helpers for manipulating attributes.

I tend to define an attrib method in my funtional tests
to represent valid attributes passed to create or update a resource.

eg:

def attrib
  {
    :first_name => 'Jim',
    :last_name => 'Bean'
  }
end

Sometimes you want to tests different values, especially invalid ones,
to get away from all the merge noise, I have defined helpers:

  missing_attrib
  blank_attrib
  replace_attrib
  add_attrib

Means you can write tests like the following:

should_not :create => Something do
  post :create, :something => blank_attrib(:first_name)
end
should :render => 'somethings/new'


Copyright (c) 2009 [Brent Greeff], released under the MIT license
